generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DEV_DATABASE_URL")
  shadowDatabaseUrl = env("DEV_SHADOW_DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  firstName           String
  middleName          String?
  lastName            String
  emailVerified       Boolean              @default(false)
  phoneVerified       Boolean              @default(false)
  phone               String?              @unique
  email               String               @unique
  password            String
  role                UserRole             @default(CLIENT)
  provider            String?
  providerId          String?              @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  passwordResetTokens PasswordResetToken[]
  vendor              Vendor?
  notification        Notification[]       @relation("UserNotifications")

  @@index([role])
  @@index([email])
}

model Vendor {
  id              String          @id @default(cuid())
  businessName    String
  rcNumber        String          @unique
  nin             String
  yearsInBusiness YearsInBusiness
  serviceCategory ServiceCategory
  phoneNumber     String
  businessAddress String
  status          VendorStatus    @default(PENDING)
  userId          String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  services        Service[]
  user            User            @relation(fields: [userId], references: [id])
  vendorAccounts  VendorAccount?
  vendorServices  VendorService[]
  bookings        Booking[]

  @@index([status])
  @@index([serviceCategory])
  @@index([createdAt])
}

model VendorService {
  id       String          @id @default(cuid())
  vendorId String
  category ServiceCategory
  name     ServiceName     @unique
  vendor   Vendor          @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
  @@index([category])
}

model Service {
  id             String         @id @default(cuid())
  name           String
  description    String
  location       String
  pricingModel   PricingModel
  availableHours AvailableHours
  images         String[]
  minPrice       Int?
  maxPrice       Int?
  fixedPrice     Int?
  startingPrice  Int?
  vendorId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  vendor         Vendor         @relation(fields: [vendorId], references: [id])

  @@unique([name, vendorId], name: "name_vendorId")
  @@index([vendorId])
  @@index([pricingModel])
  @@index([availableHours])
  @@index([createdAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model VerificationRequest {
  id        String        @id @default(cuid())
  ipAddress String
  userId    String
  status    String
  email     String?       @unique
  phone     String?       @unique
  password  String
  idType    RequestIDType @default(PHONE)
  verified  Boolean       @default(false)
  otp       String?
  otpExpiry DateTime?
  pinId     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model VendorAccount {
  id                 String             @id @default(cuid())
  vendorId           String             @unique
  bankName           String
  accountHolderName  String
  accountNumber      String
  accountType        AccountType
  utilityBillUrl     String?
  validIdUrl         String?
  businessCertUrl    String?
  verificationStatus VerificationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  vendor             Vendor             @relation(fields: [vendorId], references: [id])

  @@index([verificationStatus])
  @@index([createdAt])
}

enum UserRole {
  VENDOR
  ADMIN
  CLIENT
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
}

enum YearsInBusiness {
  ZERO_TO_ONE
  TWO_TO_FIVE
  SIX_TO_TEN
  ELEVEN_TO_TWENTY
  ABOVE_TWENTY
}

enum ServiceCategory {
  DECOR_AND_LIGHTING
  ENTERTAINMENT_AND_MEDIA
  FASHION_BEAUTY_AND_STYLING
  FOOD_AND_BEVERAGE
  BEAUTY_AND_STYLING
  LOGISTICS
  PLANNING_AND_COORDINATION
}

enum ServiceName {
  DJ
  ENTERTAINMENT
  MC_HOST
  PHOTO_BOOTH
  PHOTOGRAPHER
  VIDEOGRAPHER
  ASOEBI
  COSTUMES
  FABRICS
  HAIR_STYLIST
  MAKEUP_ARTIST
  WEDDING_DRESSES
  EVENT_DECORATOR
  FLORIST
  LIGHTING
  RENTALS
  SOUND_AND_PA_SYSTEM_PROVIDER
  SOUVENIRS
  BAKER
  BARTENDER
  CATERER
  LOGISTICS_SERVICE
  TRANSPORTATION
  EVENT_PLANNER
  SECURITY
  USHERS
}

enum PricingModel {
  FixedPrice
  PriceRange
  StartingFrom
  CustomQuote
}

enum AvailableHours {
  ByAppointmentOnly
  OpenForSelectedHours
  AlwaysAvailable
}

enum RequestIDType {
  PHONE
  EMAIL
}

enum AccountType {
  SAVINGS
  CURRENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Booking {
  id            String         @id @default(uuid())
  vendor        Vendor         @relation(fields: [vendorId], references: [id])
  vendorId      String
  service       String
  clientName    String?
  bookingDate   DateTime
  notes         String?
  status        BookingStatus  @default(PENDING)
  amount        Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[] @relation("BookingNotifications")

  @@index([vendorId])
  @@index([status])
  @@index([bookingDate])
  @@index([createdAt])
}

enum BookingStatus {
  PENDING
  UPCOMING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  bookingId String?
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation("UserNotifications", fields: [userId], references: [id])
  booking   Booking?         @relation("BookingNotifications", fields: [bookingId], references: [id])
}

enum NotificationType {
  NEW_BOOKING
  CONTRACT_PENDING
  BOOKING_CONFIRMED
  BOOKING_COMPLETED
}
